apply plugin: 'com.android.library'
//发布开源项目到Jcenter/Bintray
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

android {
    compileSdkVersion Integer.parseInt(compileSdkVersionG)
    buildToolsVersion buildToolsVersionG

    defaultConfig {
        minSdkVersion Integer.parseInt(minSdkVersionG)
        targetSdkVersion Integer.parseInt(targetSdkVersionG)
        versionCode 1
        versionName "1.0"

        manifestPlaceholders = [
                GETUI_APP_ID    : "woyGEtbGqg5ipVQIxLkkrA",
                GETUI_APP_KEY   : "2I90eUGtr56t4mTKXeNDxA",
                GETUI_APP_SECRET: "cGOCCeNEKx932WF90OiEG"
        ]

        ndk {
            abiFilters "armeabi", "armeabi-v7a", "x86_64"
        }

        //ARouter需要，凡是用到ARouter的模块都需要添加
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        if (project.rootProject.findProject("app")) {
            exclude 'lib/**/*.so'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile "com.android.support:appcompat-v7:$supportG"
    testCompile 'junit:junit:4.12'

    //凡是用到ARouter的模块都需要添加
    annotationProcessor 'com.alibaba:arouter-compiler:1.1.2'
    compile "com.dsm.libarouter:libarouter:$libarouterVersion"

    compile "com.dsm.platform:libdsmplatform:$libdsmplatformVersion"
    compile 'com.getui:sdk:2.10.2.0'
}

//发布开源项目到Jcenter/Bintray
// 项目引用的版本号
version = "1.0.0"

// 定义两个链接，下面会用到。
def siteUrl = 'https://github.com/dessmann/push' // 项目主页。
def gitUrl = 'https://github.com/dessmann/push.git' // Git仓库的url。

// 唯一包名
group = "com.dsm.xiaodi.push"
install {
    repositories.mavenInstaller {
        // 生成pom.xml和参数
        pom {
            project {
                packaging 'aar'
                // 项目描述
//                name 'libbluetoothle'// 可选，项目名称。
//                description '一个对蓝牙ble的封装，采用回调方式实现，让蓝牙ble的操作变得简单.'// 可选，项目描述。
                url siteUrl // 项目主页

                // 软件开源协议，现在一般都是Apache License2.0
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                //填写开发者基本信息
                developers {
                    developer {
                        id 'dccjll' // 开发者的id。
                        name '净琉璃' // 开发者名字。
                        email 'yiyeshu1015@vip.qq.com' // 开发者邮箱。
                    }
                }

                // SCM
                scm {
                    connection gitUrl // Git仓库地址。
                    developerConnection gitUrl // Git仓库地址。
                    url siteUrl // 项目主页。
                }
            }
        }
    }
}
// 生成jar包的task
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}
// 生成jarDoc的task
task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    // destinationDir = file("../javadoc/")
    failOnError false // 忽略注释语法错误，如果用jdk1.8你的注释写的不规范就编译不过。
}
// 生成javaDoc的jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}

// 这里是读取Bintray相关的信息，我们上传项目到github上的时候会把gradle文件传上去，所以不要把帐号密码的信息直接写在这里，写在local.properties中，这里动态读取。
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
bintray {
    user = properties.getProperty("bintray.user") // Bintray的用户名。
    key = properties.getProperty("bintray.apikey") // Bintray刚才保存的ApiKey。

    configurations = ['archives']
    pkg {
        repo = "maven"  // 上传到maven库。（这里要特别注意，如果写了maven报404错误，请在bintray创建一个仓库，这里填改成你创建的仓库的名字，如何创建请看下图。）
        name = "xiaodipush"  // 发布到Bintray上的项目名字
        userOrg = 'littledccjll' // Bintray的用户名
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ["Apache-2.0"]
        publish = true // 是否是公开项目。
    }
}
